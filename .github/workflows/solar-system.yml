name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'    
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}  
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
    
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb+srv://localhost:27017/superData'    
          MONGO_USERNAME: non-prod-username
          MONGO_PASSWORD: non-prod-password 
        strategy:
          matrix:
           nodejs_version: [18,20] 
           operating_ststems: [ubuntu-latest]
           exclude:
             - nodejs_version: 18
               operating_ststems: macos-latest
        runs-on: ${{matrix.operating_ststems}}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{matrix.nodejs_version}}

        - name: cache NPM Dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}
            

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: nodejs-unit_testing-step
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result-${{ matrix.nodejs_version }}-${{ matrix.operating_ststems }}-${{ github.run_number }}
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        container: 
          image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: 
              --name mongo
        env:
          MONGO_URI: 'mongodb+srv://mongo:27017/superData'    
          MONGO_USERNAME: non-prod-username
          MONGO_PASSWORD: non-prod-password           
        runs-on: ubuntu-latest

        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

         # - name: Setup NodeJS Version - 18
         #   uses: actions/setup-node@v3
         #   with:
         #    node-version: 18

          - name: cache NPM Dependencies
            uses: actions/cache@v3
            with:
               path: mode_modules
               key: ${{runner.os}}-node-modules-${{hashFiles('package-lock.json')}}   

          - name: Install Dependencies
            run: npm install

          - name: Check Code Coverage
            continue-on-error: true
            run: npm run coverage

          - name: Archive Test Result
            uses: actions/upload-artifact@v4
            with:
               name: Code-Coverage-Result
               path: coverage
               retention-days: 5
    docker:
       name: contaierization
       needs: [unit-testing, code-coverage]
       permissions: 
        packages: write
       runs-on: ubuntu-latest
       steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Dockerhub login
            uses: docker/login-action@v2.2.0
            with: 
              username: ${{vars.DOCKERHUB_USERNAME}}
              password: ${{secrets.DOCKERHUB_PASSWORD}}    

          - name: GHCR login
            uses: docker/login-action@v2.2.0
            with: 
              registry: ghcr.io
              username: ${{github.repository_owner}}
              password: ${{secrets.GITHUB_TOKEN}}      
               
          - name: Docker Build For Testing
            uses: docker/build-push-action@v4
            with:
             context: .
             push: false
             tags: |
               abdelkarim3/solar-systems:${{ github.sha }}
               

          - name: Docker Image Test
            run: |
              docker images
              docker run --name solar-systems-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              abdelkarim3/solar-systems:${{ github.sha }}

              export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-systems-app)
              echo $IP
              echo Testing Image URL using wget
              wget -q -O - 127.0.0.1:3000/live | grep live

          - name: Docker Registry Push
            uses: docker/build-push-action@v4
            with:
             context: .
             push: true
             tags: |
               abdelkarim3/solar-systems:${{ github.sha }}
               ghcr.io/abdelkarim-29/solar-systems:${{ github.sha }}   

    dev-deploy:
      needs: docker
      runs-on: self-
      steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Install kubectl CLI  
            uses: azure/setup-kubectl@v4
            with:
              version: 'latest'  
           
          - name: Set Kubeconfig file
            uses: azure/k8s-set-context@v4
            with:
              method: kubeconfig
              kubeconfig: ${{secrets.KUBECONFIG}}    
              
          - name: Fetch kubernetes Cluster Details
            run: |
              kubectl version --client=true    
              echo ====================================
              kubectl get nodes






